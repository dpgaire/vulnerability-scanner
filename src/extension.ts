import * as vscode from 'vscode';

export function activate(context: vscode.ExtensionContext) {
  console.log('Vulnerability Scanner extension is active!');

  // Register command for scanning code
  let disposable = vscode.commands.registerCommand('extension.scanCode', () => {
    const editor = vscode.window.activeTextEditor;
    if (!editor) {
      vscode.window.showInformationMessage('No active editor detected.');
      return;
    }

    const document = editor.document;
    const text = document.getText();

    // Vulnerability detection patterns
      const vulnerabilities = [
            {
                name: 'Avoid using eval()',
                regex: /\beval\s*\(/g,
                severity: vscode.DiagnosticSeverity.Warning,
                message: 'Potential security issue: avoid using eval().',
            },
            {
                name: 'Avoid using innerHTML',
                regex: /\.innerHTML\s*=/g,
                severity: vscode.DiagnosticSeverity.Warning,
                message: 'Potential security issue: avoid using innerHTML (prone to XSS attacks).',
            },
            {
                name: 'Possible SQL Injection',
                regex: /\bSELECT\s+.+\s+FROM\s+.+\s+WHERE\s+.*\s*=\s*.+/gi,
                severity: vscode.DiagnosticSeverity.Error,
                message: 'Potential SQL Injection vulnerability: unsanitized input in SQL query.',
            },
            {
                name: 'Avoid MD5 hashing',
                regex: /crypto\.createHash\s*\(\s*['"]md5['"]\s*\)/g,
                severity: vscode.DiagnosticSeverity.Warning,
                message: 'Security risk: MD5 is a weak hashing algorithm. Consider using SHA-256.',
            },
            {
                name: 'Hardcoded API Key',
                regex: /const\s+[a-zA-Z_$][0-9a-zA-Z_$]*\s*=\s*['"][A-Za-z0-9-_]{10,}['"]\s*;/g,
                severity: vscode.DiagnosticSeverity.Warning,
                message: 'Security risk: Avoid hardcoding sensitive information such as API keys.',
            },
            {
                name: 'Insecure random number generation',
                regex: /Math\.random\s*\(\s*\)/g,
                severity: vscode.DiagnosticSeverity.Warning,
                message: 'Security risk: Math.random() is not cryptographically secure.',
            },
            {
                name: 'Avoid using new Function()',
                regex: /\bnew\s+Function\s*\(/g,
                severity: vscode.DiagnosticSeverity.Warning,
                message: 'Security risk: avoid using new Function() (similar to eval).',
            },
            {
                name: 'Insecure setTimeout',
                regex: /setTimeout\s*\(\s*['"].+['"]\s*,/g,
                severity: vscode.DiagnosticSeverity.Warning,
                message: 'Potential security issue: avoid passing strings to setTimeout (use a function instead).',
            },
            {
                name: 'Insecure file access',
                regex: /fs\.readFile\s*\(/g,
                severity: vscode.DiagnosticSeverity.Warning,
                message: 'Potential security issue: Avoid direct access to sensitive system files.',
            },
        ];

    const diagnostics: vscode.Diagnostic[] = [];
    const textLines = text.split('\n');

    textLines.forEach((line, lineNumber) => {
      vulnerabilities.forEach((vuln) => {
        const matches = [...line.matchAll(vuln.regex)];
        if (matches.length > 0) {
          matches.forEach((match) => {
            const range = new vscode.Range(
              new vscode.Position(lineNumber, match.index ?? 0),
              new vscode.Position(lineNumber, (match.index ?? 0) + match[0].length)
            );
            const diagnostic = new vscode.Diagnostic(
              range, vuln.message, vuln.severity
            );
            diagnostics.push(diagnostic);
          });
        }
      });
    });

    const collection = vscode.languages.createDiagnosticCollection('vulnerabilityScanner');
    collection.set(document.uri, diagnostics);

    vscode.window.showInformationMessage('Code scanned for vulnerabilities!');
  });

  context.subscriptions.push(disposable);
}

export function deactivate() {}
