//This is the test file to check vulenerability.
// Use of eval (dangerous as it can execute arbitrary code)
const userInput = "console.log('Hello World')";
eval(userInput); // Vulnerable: Avoid using eval()

// Insecure use of innerHTML (can lead to XSS attacks)
document.getElementById("content").innerHTML = "<img src='malicious.png' />"; // Vulnerable: Use safer methods like textContent

// Direct use of unsanitized user input in a query
const userId = "1 OR 1=1"; // SQL Injection vulnerability
const query = `SELECT * FROM users WHERE id=${userId}`; // Vulnerable: SQL Injection risk

// Weak cryptographic algorithm (MD5 is considered insecure)
const crypto = require("crypto");
const hash = crypto.createHash("md5").update("password").digest("hex"); // Vulnerable: Use stronger algorithms like SHA-256

// Hardcoded sensitive information
const apiKey = "12345-ABCDE"; // Vulnerable: API keys or secrets should not be hardcoded

// Insecure random number generation (Math.random() is not cryptographically secure)
const sessionId = Math.random().toString(36).substring(2); // Vulnerable: Use cryptographically secure random generators

// Insecure use of new Function (similar to eval)
const fn = new Function("a", "b", "return a + b"); // Vulnerable: Avoid using new Function for dynamic code execution
const result = fn(2, 3);

// Insecure use of setTimeout with dynamic code
setTimeout("console.log('Running insecure code')", 1000); // Vulnerable: Use function instead of string for setTimeout

// Insecure file access (example for Node.js)
const fs = require("fs");
fs.readFile("/etc/passwd", (err, data) => {
  if (err) throw err;
  console.log(data);
}); // Potential issue: Accessing sensitive system files
